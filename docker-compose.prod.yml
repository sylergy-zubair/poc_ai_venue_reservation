version: '3.8'

services:
  # MongoDB database
  mongodb:
    image: mongo:7.0
    container_name: venue-booking-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: venue_booking_prod
    volumes:
      - mongodb_data_prod:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./backups:/backups
    networks:
      - venue-booking-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: venue-booking-redis-prod
    restart: always
    volumes:
      - redis_data_prod:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - venue-booking-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: venue-booking-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/venue_booking_prod?authSource=admin
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      VENUE_API_KEY: ${VENUE_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      RATE_LIMIT_MAX: 100
      CACHE_TTL: 3600
    volumes:
      - backend_logs_prod:/app/logs
    networks:
      - venue-booking-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "dist/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  # Frontend Next.js service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
    container_name: venue-booking-frontend-prod
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
    networks:
      - venue-booking-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: venue-booking-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    networks:
      - venue-booking-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # MongoDB backup service
  mongodb-backup:
    image: mongo:7.0
    container_name: venue-booking-backup-prod
    restart: "no"
    environment:
      MONGO_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - venue-booking-network
    depends_on:
      - mongodb
    profiles:
      - backup
    command: /bin/bash /backup.sh
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  mongodb_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  venue-booking-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Health monitoring and restart policies
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  mongodb:
    logging: *default-logging
  redis:
    logging: *default-logging
  backend:
    logging: *default-logging
  frontend:
    logging: *default-logging
  nginx:
    logging: *default-logging